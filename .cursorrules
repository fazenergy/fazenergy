## Contexto do Projeto
- Projeto: FazEnergyFinal — plataforma de gestão de energia.
- Monorepo:
  - `@backend/` (Django 5 + DRF, Celery, JWT, Redis, PostgreSQL; admin Jazzmin).
  - `@frontend/` (Vue 3 + Vite, Tailwind, Pinia, Vue Router, Axios).
- Comunicação: API REST JSON. Execução com Docker.
- Dev: SQLite é usado no repositório; Produção: preferencialmente PostgreSQL.
- Apps Django são modulares e evolutivos (novos apps podem surgir e os atuais podem mudar).

## Convenções e Diretrizes
- Sempre responder em PT-BR.
- Usar aliases `@backend/` e `@frontend/` ao referenciar pastas.
- Backend: DRF para APIs, autenticação via JWT, tarefas com Celery.
- Frontend: Axios para APIs, estado com Pinia, rotas com Vue Router, UI com Tailwind.
- Evitar listas rígidas de apps; tratar a estrutura como dinâmica.

## Estrutura Atual (não rígida, exemplos)
- Apps existentes (podem mudar): `core`, `proposal`, `plans`, `contracts`, `finance`, `network`, `location`, `notifications`, `webhooks`, `prospect`.

## Documentação
- Detalhes e fluxos vivos: ver `ARCHITECTURE.md` na raiz e `docs/SCOPE.md`.

## Contexto de Negócio (alto nível)
- Plataforma de afiliados MMN unilevel (5 níveis) com:
  - Adesão anual de afiliados (ativa posição na rede)
  - Venda de usinas fotovoltaicas com financiamento via REVO
  - Gestão de rede com bônus, pontos, plano de carreira, compressão dinâmica e recorrência
- Monetização:
  - Adesão anual: parte remunera bônus; restante é receita
  - Usinas: economia do cliente sustenta fluxo recorrente para comissões
- Regras chave:
  - Bônus liberado 20 dias após pagamento via cartão
  - Compressão dinâmica realoca bônus quando há inativos
- Integrações: REVO (simulação/financiamento/webhooks), Pagar.me (split/saque), Lexo Legal (contratos)

## Notas técnicas atuais (curtas)
- `core.Licensed`:
  - Removidos `city_name` e `state_abbr`; manter apenas `city_lookup -> location.City`.
  - Adicionado `dtt_activation` (DateTimeField) — ver migração `core/0003_update_licensed_activation_city_cleanup.py`.
- `core.Operator`:
  - Removidos `city_name` e `state_abbr`; manter apenas `city_lookup` — ver migração `core/0004_remove_operator_city_fields.py`.
- `network.Product`:
  - Novo model simples (`name`, `dtt_record`, `dtt_update`) — migração `network/0002_create_product.py`.
- `prospect` (novo app):
  - Models: `Prospect` (FK `network.Product`, FK `core.Licensed`), `Proposal` (FK `Prospect`), `ProposalResult` (FK `Proposal`).
  - Rotas: `api/prospect/prospects/`, `api/prospect/proposals/`, `api/prospect/proposal-results/`.
  - Tabelas criadas com nomes iniciando em maiúsculas: `"Prospect"`, `"ProspectProposal"`, `"ProspectProposalResult"` (usar aspas em SQL/clients).
- `backend/manage.py`:
  - Debugpy opcional via `ENABLE_DEBUGPY=1` e porta via `DEBUGPY_PORT`; por padrão só ativa no `runserver`.

## Pendências de alinhamento (planejadas)
- `plans.PlanAdesion.licensed` apontar para `core.Licensed` (hoje aponta para `User`).
- Ajustar `finance.PaymentLink.approve_payment` para usar `ind_payment_status`, `typ_payment`, `dtt_payment` de `PlanAdesion`.
- Corrigir `core.signals` para usar `network.UnilevelNetwork` com `upline_licensed/downline_licensed`.
- (Opcional) Padronizar nomes de tabelas do app `prospect` para snake_case (evitar necessidade de aspas em SQL/IDE).

